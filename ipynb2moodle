#!/usr/bin/python3
#
# Copyright (c) 2023-2024 Stuart Prescott, UNSW Engineering.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of PyCA Cryptography nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
ipynb2moodle - render Jupyter notebooks for the Moodle Assignment marking interface

See README.md for further details.

From assignment tool
 - view submissions
 - download all submissions in folders
 - Download all submissions
 - run ipynb2moodle download.zip
 - upload uploadable.zip

Notes:
 - needs nbconvert, wkhtmltoimage, imagemagick:
   apt install jupyter-nbconvert wkhtmltopdf imagemagick
 - imagemagick needs to know it can deal with bigger files
   /etc/ImageMagick-6/policy.xml:
     <policy domain="resource" name="width" value="16KP"/>
     <policy domain="resource" name="height" value="40KP"/>
"""

import logging
from pathlib import Path
import shutil
import subprocess
import sys
import tempfile


logging.basicConfig(format="%(levelname)s:%(message)s", level=logging.DEBUG)


class ConversionException(Exception):
    pass


def shell_step(*args, **kwargs):
    proc = subprocess.run(
        *args,
        capture_output=True,
        check=False,
        **kwargs,
    )
    if proc.returncode != 0:
        raise ConversionException(proc)


def ipynb2html(infile, outfile):
    # nbconvert seems to interpret the filename (something sketchy in its parse_args?)
    with tempfile.TemporaryDirectory() as tmpdir:
        tmpfile = Path(tmpdir) / "submission.ipynb"
        shutil.copy(infile, tmpfile)
        shell_step(
            [
                "jupyter-nbconvert",
                tmpfile,
                "--to",
                "html",
                "--output",
                outfile,
            ]
        )


def html2img(infile, outfile):
    shell_step(
        [
            "wkhtmltoimage",
            # FIXME: looks dangerous but otherwise:
            # "Exit with code 1 due to network error: ProtocolUnknownError"
            "--enable-local-file-access",
            "--disable-plugins",
            "--quality",
            "1",  # enable PNG compression
            infile,
            outfile,
        ]
    )


def img2pdf(infile, outfile):
    shell_step(["convert", infile, outfile])


def submission_converter(infile, username, outdir):
    logging.info("Processing submitted file %s", infile)
    inpath = Path(infile)
    outpath = Path(outdir) / username
    outpath.mkdir(exist_ok=True)
    htmlfile = outpath / inpath.with_suffix(".html").name
    imgfile = outpath / inpath.with_suffix(".png").name
    pdffile = outpath / inpath.with_suffix(".pdf").name

    ipynb2html(inpath, htmlfile)
    html2img(htmlfile, imgfile)
    img2pdf(imgfile, pdffile)

    return imgfile, pdffile


def submission_assembler(username, imgfiles, pdffile, outdir):
    outpath = Path(outdir)
    # prefix = "Attempt1_filesubmission_"
    prefix = "ipynb2moodle_"
    pdfupload = outpath / username / f"{prefix}{pdffile.name}"
    previewpath = outpath / username / f"{prefix}{pdffile.name}.rawImages"
    # FIXME: what if more than 9 images? (we should only have 1 from wkhtmltoimage)
    imgpaths = [previewpath / f"image_page{idx}.png" for idx in range(len(imgfiles))]

    previewpath.mkdir(parents=True, exist_ok=True)
    # copy files around
    shutil.copy(pdffile, pdfupload)
    for imgin, imgout in zip(imgfiles, imgpaths):
        shutil.copy(imgin, imgout)


def batch_process(fs):
    errors = 0
    for username, submission in fs.submissions():
        for infile in submission.glob("**/*.ipynb"):
            # FIXME: do we need to check there isn't already a PDF for this item?
            try:
                logging.info("processing: %s", infile)
                imgfile, pdffile = submission_converter(
                    infile, username, fs.intermediate
                )
                submission_assembler(username, [imgfile], pdffile, fs.upload)
            except ConversionException as e:
                logging.error("conversion of %s failed: %s", infile, str(e))
                errors += 1

    return errors


def unpack(zipfile, outdir):
    logging.info("Working on %s", zipfile)
    logging.debug("Unpacking '%s' into '%s'", zipfile, outdir)
    shutil.unpack_archive(zipfile, outdir, "zip")


def repack(zipfile, indir):
    logging.info("Creating %s", zipfile)
    shutil.make_archive(zipfile, "zip", indir)


def process_zip(zipfile):
    name = Path(zipfile).stem
    fs = FS(".", name)
    unpack(zipfile, fs.downloaded)
    status = batch_process(fs)
    repack(fs.uploadable, fs.upload)
    return status


class FS:
    def __init__(self, base, name):
        self.base = Path(base)

        self.downloaded = self.base / "downloaded"
        self.downloaded.mkdir(parents=True, exist_ok=True)

        self.intermediate = (self.base / "intermediate").absolute()
        self.intermediate.mkdir(parents=True, exist_ok=True)

        self.upload = (self.base / "output").absolute()
        self.upload.mkdir(parents=True, exist_ok=True)

        self.uploadable = (
            self.base / f"{name} uploadable"
        )  # .zip will be added automatically
        self.upload.mkdir(parents=True, exist_ok=True)

    def submissions(self):
        logging.debug("Searching '%s'", self.downloaded)
        for submission in self.downloaded.glob("*_*"):
            logging.debug("Testing '%s'", submission)
            if submission.is_dir():
                logging.debug("Found %s", submission)
                username, _, _ = str(submission.name).partition("_")
                yield username, submission


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("USAGE: ipynb2moodle download.zip")
        sys.exit(1)

    downloaded_archive = sys.argv[1]

    status = process_zip(downloaded_archive)

    if status > 0:
        logging.error("CONVERSION DID NOT COMPLETE CLEANLY")
    else:
        logging.info("CONVERSION COMPLETED")

    sys.exit(status)
